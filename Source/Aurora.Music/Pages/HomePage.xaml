<!--
Copyright (c) Aurora Studio. All rights reserved.

Licensed under the MIT License. See LICENSE in the project root for license information.
-->
<Page
    x:Class="Aurora.Music.Pages.HomePage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:list="using:Aurora.Music.Controls.ListItems"
    xmlns:vm="using:Aurora.Music.ViewModels"
    xmlns:ext="using:Microsoft.Toolkit.Uwp.UI.Extensions"
    xmlns:animations="using:Microsoft.Toolkit.Uwp.UI.Animations"
    xmlns:toolkit="using:Microsoft.Toolkit.Uwp.UI.Controls"
    SizeChanged="Page_SizeChanged"
    Unloaded="Page_Unloaded"
    mc:Ignorable="d">

    <Page.DataContext>
        <vm:HomePageViewModel x:Name="Context"/>
    </Page.DataContext>

    <Page.Transitions>
        <TransitionCollection>
            <NavigationThemeTransition/>
            <EntranceThemeTransition />
        </TransitionCollection>
    </Page.Transitions>

    <Page.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../Themes/Styles.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <ResourceDictionary.ThemeDictionaries>
                <ResourceDictionary x:Key="Light" Source="../Themes/Light.xaml"/>
                <ResourceDictionary x:Key="Dark" Source="../Themes/Dark.xaml"/>
            </ResourceDictionary.ThemeDictionaries>
            <Style x:Key="HeroGridViewStyle" TargetType="GridView">
                <Setter Property="Padding" Value="0,0,0,10"/>
                <Setter Property="IsTabStop" Value="False"/>
                <Setter Property="TabNavigation" Value="Once"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Disabled"/>
                <Setter Property="ScrollViewer.IsHorizontalRailEnabled" Value="False"/>
                <Setter Property="ScrollViewer.VerticalScrollMode" Value="Enabled"/>
                <Setter Property="ScrollViewer.IsVerticalRailEnabled" Value="True"/>
                <Setter Property="ScrollViewer.ZoomMode" Value="Disabled"/>
                <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False"/>
                <Setter Property="ScrollViewer.BringIntoViewOnFocusChange" Value="True"/>
                <Setter Property="IsSwipeEnabled" Value="True"/>
                <Setter Property="UseSystemFocusVisuals" Value="True"/>
                <Setter Property="FocusVisualMargin" Value="-2"/>
                <Setter Property="ItemContainerTransitions">
                    <Setter.Value>
                        <TransitionCollection>
                            <AddDeleteThemeTransition/>
                            <ContentThemeTransition/>
                            <ReorderThemeTransition/>
                            <EntranceThemeTransition IsStaggeringEnabled="True"/>
                        </TransitionCollection>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <ItemsWrapGrid Orientation="Horizontal"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="GridView">
                            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" 
                                    BorderBrush="{TemplateBinding BorderBrush}">
                                <ScrollViewer x:Name="ScrollViewer" AutomationProperties.AccessibilityView="Raw" 
                                              BringIntoViewOnFocusChange="{TemplateBinding ScrollViewer.BringIntoViewOnFocusChange}" 
                                              HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" 
                                              HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" 
                                              IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" 
                                              IsVerticalScrollChainingEnabled="{TemplateBinding ScrollViewer.IsVerticalScrollChainingEnabled}" 
                                              IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" 
                                              IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" 
                                              IsHorizontalScrollChainingEnabled="{TemplateBinding ScrollViewer.IsHorizontalScrollChainingEnabled}" 
                                              TabNavigation="{TemplateBinding TabNavigation}" 
                                              VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" 
                                              VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" 
                                              ZoomMode="{TemplateBinding ScrollViewer.ZoomMode}">
                                    <ItemsPresenter Footer="{TemplateBinding Footer}" FooterTransitions="{TemplateBinding FooterTransitions}" 
                                                    FooterTemplate="{TemplateBinding FooterTemplate}" Header="{TemplateBinding Header}" 
                                                    HeaderTransitions="{TemplateBinding HeaderTransitions}" 
                                                    HeaderTemplate="{TemplateBinding HeaderTemplate}" 
                                                    Padding="{TemplateBinding Padding}"/>
                                </ScrollViewer>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="ListViewItem" x:Key="HomeListViewItemStyle">
                <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
                <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
                <Setter Property="Background" Value="{ThemeResource ListViewItemBackground}" />
                <Setter Property="Foreground" Value="{ThemeResource ListViewItemForeground}" />
                <Setter Property="TabNavigation" Value="Local" />
                <Setter Property="IsHoldingEnabled" Value="True" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="MinWidth" Value="{ThemeResource ListViewItemMinWidth}" />
                <Setter Property="MinHeight" Value="{ThemeResource ListViewItemMinHeight}" />
                <Setter Property="AllowDrop" Value="False" />
                <Setter Property="UseSystemFocusVisuals" Value="True" />
                <Setter Property="FocusVisualMargin" Value="0" />
                <Setter Property="FocusVisualPrimaryBrush" Value="{ThemeResource ListViewItemFocusVisualPrimaryBrush}" />
                <Setter Property="FocusVisualPrimaryThickness" Value="2" />
                <Setter Property="FocusVisualSecondaryBrush" Value="{ThemeResource ListViewItemFocusVisualSecondaryBrush}" />
                <Setter Property="FocusVisualSecondaryThickness" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ListViewItem">
                            <ListViewItemPresenter ContentTransitions="{TemplateBinding ContentTransitions}"
                                                   x:Name="Root" HorizontalAlignment="Stretch"
                                                   Control.IsTemplateFocusTarget="True" Margin="0,0,16,0"
                                                   FocusVisualMargin="{TemplateBinding FocusVisualMargin}"
                                                   FocusVisualPrimaryBrush="{TemplateBinding FocusVisualPrimaryBrush}"
                                                   FocusVisualPrimaryThickness="{TemplateBinding FocusVisualPrimaryThickness}"
                                                   FocusVisualSecondaryBrush="{TemplateBinding FocusVisualSecondaryBrush}"
                                                   FocusVisualSecondaryThickness="{TemplateBinding FocusVisualSecondaryThickness}"
                                                   SelectionCheckMarkVisualEnabled="{ThemeResource ListViewItemSelectionCheckMarkVisualEnabled}"
                                                   CheckBrush="{ThemeResource ListViewItemCheckBrush}"
                                                   CheckBoxBrush="{ThemeResource ListViewItemCheckBoxBrush}"
                                                   DragBackground="{ThemeResource ListViewItemDragBackground}"
                                                   DragForeground="{ThemeResource ListViewItemDragForeground}"
                                                   FocusBorderBrush="{ThemeResource ListViewItemFocusBorderBrush}"
                                                   FocusSecondaryBorderBrush="{ThemeResource ListViewItemFocusSecondaryBorderBrush}"
                                                   PlaceholderBackground="{ThemeResource ListViewItemPlaceholderBackground}"
                                                   Padding="0"
                                                   PointerOverBackground="{ThemeResource SystemControlBackgroundAltMediumLowBrush}"
                                                   PointerOverForeground="{ThemeResource AccentForText}"
                                                   SelectedBackground="{ThemeResource ListViewItemBackgroundSelected}"
                                                   SelectedForeground="{ThemeResource ListViewItemForegroundSelected}"
                                                   SelectedPointerOverBackground="{ThemeResource ListViewItemBackgroundSelectedPointerOver}"
                                                   PressedBackground="{ThemeResource ListViewItemBackgroundPressed}"
                                                   SelectedPressedBackground="{ThemeResource ListViewItemBackgroundSelectedPressed}"
                                                   DisabledOpacity="{ThemeResource ListViewItemDisabledThemeOpacity}"
                                                   DragOpacity="{ThemeResource ListViewItemDragThemeOpacity}"
                                                   ReorderHintOffset="{ThemeResource ListViewItemReorderHintThemeOffset}"
                                                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                   ContentMargin="{TemplateBinding Padding}"
                                                   CheckMode="{ThemeResource ListViewItemCheckMode}"
                                                   RevealBackground="{ThemeResource ListViewItemRevealBackground}"
                                                   RevealBorderThickness="1"
                                                   RevealBorderBrush="{ThemeResource SystemControlBackgroundTransparentRevealBorderBrush}">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal" />
                                        <VisualState x:Name="Selected" />
                                        <VisualState x:Name="PointerOver">
                                            <VisualState.Setters>
                                                <Setter Target="Root.(RevealBrush.State)" Value="PointerOver" />
                                            </VisualState.Setters>
                                        </VisualState>
                                        <VisualState x:Name="PointerOverSelected">
                                            <VisualState.Setters>
                                                <Setter Target="Root.(RevealBrush.State)" Value="PointerOver" />
                                            </VisualState.Setters>
                                        </VisualState>
                                        <VisualState x:Name="PointerOverPressed">
                                            <VisualState.Setters>
                                                <Setter Target="Root.(RevealBrush.State)" Value="Pressed" />
                                            </VisualState.Setters>
                                        </VisualState>
                                        <VisualState x:Name="Pressed">
                                            <VisualState.Setters>
                                                <Setter Target="Root.(RevealBrush.State)" Value="Pressed" />
                                            </VisualState.Setters>
                                        </VisualState>
                                        <VisualState x:Name="PressedSelected">
                                            <VisualState.Setters>
                                                <Setter Target="Root.(RevealBrush.State)" Value="Pressed" />
                                            </VisualState.Setters>
                                        </VisualState>
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="DisabledStates">
                                        <VisualState x:Name="Enabled" />
                                        <VisualState x:Name="Disabled">
                                            <VisualState.Setters>
                                                <Setter Target="Root.RevealBorderThickness" Value="0" />
                                            </VisualState.Setters>
                                        </VisualState>
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="Adaptive">
                                        <VisualState x:Name="Wide">
                                            <VisualState.StateTriggers>
                                                <AdaptiveTrigger MinWindowWidth="1008"/>
                                            </VisualState.StateTriggers>
                                        </VisualState>
                                        <VisualState x:Name="Medium">
                                            <VisualState.StateTriggers>
                                                <AdaptiveTrigger MinWindowWidth="641"/>
                                            </VisualState.StateTriggers>
                                            <VisualState.Setters>
                                                <Setter Target="Root.Margin" Value="0,0,12,0"/>
                                            </VisualState.Setters>
                                        </VisualState>
                                        <VisualState x:Name="Narrow">
                                            <VisualState.StateTriggers>
                                                <AdaptiveTrigger MinWindowWidth="0"/>
                                            </VisualState.StateTriggers>
                                            <VisualState.Setters>
                                                <Setter Target="Root.Margin" Value="0,0,8,0"/>
                                            </VisualState.Setters>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                            </ListViewItemPresenter>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="GridViewItem" x:Key="HeroGridViewItem">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="GridViewItem">
                            <ListViewItemPresenter ContentTransitions="{TemplateBinding ContentTransitions}"
                        x:Name="Root" Margin="12" Background="{x:Null}" BorderBrush="{x:Null}"
                        Control.IsTemplateFocusTarget="True"
                        FocusVisualMargin="{TemplateBinding FocusVisualMargin}"
                        FocusVisualPrimaryBrush="{TemplateBinding FocusVisualPrimaryBrush}"
                        FocusVisualPrimaryThickness="{TemplateBinding FocusVisualPrimaryThickness}"
                        FocusVisualSecondaryBrush="{TemplateBinding FocusVisualSecondaryBrush}"
                        FocusVisualSecondaryThickness="{TemplateBinding FocusVisualSecondaryThickness}"
                        SelectionCheckMarkVisualEnabled="{ThemeResource GridViewItemSelectionCheckMarkVisualEnabled}"
                        CheckBrush="{ThemeResource GridViewItemCheckBrush}"
                        CheckBoxBrush="{ThemeResource GridViewItemCheckBoxBrush}"
                        DragBackground="{ThemeResource GridViewItemDragBackground}"
                        DragForeground="{ThemeResource GridViewItemDragForeground}"
                        FocusBorderBrush="{ThemeResource GridViewItemFocusBorderBrush}"
                        FocusSecondaryBorderBrush="{ThemeResource GridViewItemFocusSecondaryBorderBrush}"
                        PlaceholderBackground="{ThemeResource GridViewItemPlaceholderBackground}"
                        PointerOverBackground="{x:Null}"
                        PointerOverForeground="{ThemeResource GridViewItemForegroundPointerOver}"
                        SelectedBackground="{x:Null}"
                        SelectedForeground="{ThemeResource GridViewItemForegroundSelected}"
                        SelectedPointerOverBackground="{ThemeResource GridViewItemBackgroundSelectedPointerOver}"
                        PressedBackground="{x:Null}"
                        SelectedPressedBackground="{ThemeResource GridViewItemBackgroundSelectedPressed}"
                        DisabledOpacity="{ThemeResource ListViewItemDisabledThemeOpacity}"
                        DragOpacity="{ThemeResource ListViewItemDragThemeOpacity}"
                        ReorderHintOffset="{ThemeResource GridViewItemReorderHintThemeOffset}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        ContentMargin="0"
                        CheckMode="{ThemeResource GridViewItemCheckMode}"
                        RevealBackground="{ThemeResource GridViewItemRevealBackground}"
                        RevealBorderThickness="0"
                        RevealBorderBrush="{ThemeResource SystemControlTransparentRevealBorderBrush}"
                        RevealBackgroundShowsAboveContent="True">

                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Normal" />
                                        <VisualState x:Name="Selected" />

                                        <VisualState x:Name="PointerOver">
                                            <VisualState.Setters>
                                                <Setter Target="Root.(RevealBrush.State)" Value="PointerOver" />
                                            </VisualState.Setters>
                                        </VisualState>

                                        <VisualState x:Name="PointerOverSelected">
                                            <VisualState.Setters>
                                                <Setter Target="Root.(RevealBrush.State)" Value="PointerOver" />
                                            </VisualState.Setters>
                                        </VisualState>
                                        <VisualState x:Name="PointerOverPressed">
                                            <VisualState.Setters>
                                                <Setter Target="Root.(RevealBrush.State)" Value="Pressed" />
                                            </VisualState.Setters>
                                        </VisualState>

                                        <VisualState x:Name="Pressed">
                                            <VisualState.Setters>
                                                <Setter Target="Root.(RevealBrush.State)" Value="Pressed" />
                                            </VisualState.Setters>
                                        </VisualState>

                                        <VisualState x:Name="PressedSelected">
                                            <VisualState.Setters>
                                                <Setter Target="Root.(RevealBrush.State)" Value="Pressed" />
                                            </VisualState.Setters>
                                        </VisualState>
                                    </VisualStateGroup>

                                    <VisualStateGroup x:Name="DisabledStates">
                                        <VisualState x:Name="Enabled" />

                                        <VisualState x:Name="Disabled">
                                            <VisualState.Setters>
                                                <Setter Target="Root.RevealBorderThickness" Value="0" />
                                            </VisualState.Setters>
                                        </VisualState>
                                    </VisualStateGroup>
                                    <VisualStateGroup x:Name="Adaptive">
                                        <VisualState x:Name="Wide">
                                            <VisualState.StateTriggers>
                                                <AdaptiveTrigger MinWindowWidth="1008"/>
                                            </VisualState.StateTriggers>
                                        </VisualState>
                                        <VisualState x:Name="Medium">
                                            <VisualState.StateTriggers>
                                                <AdaptiveTrigger MinWindowWidth="641"/>
                                            </VisualState.StateTriggers>
                                            <VisualState.Setters>
                                                <Setter Target="Root.Margin" Value="8"/>
                                            </VisualState.Setters>
                                        </VisualState>
                                        <VisualState x:Name="Narrow">
                                            <VisualState.StateTriggers>
                                                <AdaptiveTrigger MinWindowWidth="0"/>
                                            </VisualState.StateTriggers>
                                            <VisualState.Setters>
                                                <Setter Target="Root.Margin" Value="4"/>
                                            </VisualState.Setters>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                            </ListViewItemPresenter>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Page.Resources>

    <Grid x:Name="Main" 
          HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
          Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="Tablets">

                </VisualState>
                <VisualState x:Name="Narrow">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="RandomPanel.Margin" Value="16,64,8,8"/>
                        <Setter Target="FavoritPanel.Margin" Value="16,64,8,8"/>
                        <Setter Target="OnlinePanel.Margin" Value="16,64,8,8"/>
                        <Setter Target="TextContainer.Padding" Value="16,0,0,0"/>
                        <Setter Target="RandomHeader.Width" Value="16"/>
                        <Setter Target="FavHeader.MinWidth" Value="16"/>
                        <Setter Target="OnlineList.Padding" Value="16,0"/>
                        <Setter Target="FavHeader.Padding" Value="16,0,0,0"/>
                        <Setter Target="HeroHeader.Width" Value="16"/>
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Medium">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="641"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="RandomPanel.Margin" Value="16,64,16,8"/>
                        <Setter Target="FavoritPanel.Margin" Value="16,64,16,8"/>
                        <Setter Target="OnelinePanel.Margin" Value="16,64,16,8"/>
                        <Setter Target="TextContainer.Padding" Value="16,0,0,0"/>
                        <Setter Target="RandomHeader.Width" Value="16"/>
                        <Setter Target="OnlineList.Padding" Value="16,0"/>
                        <Setter Target="FavHeader.MinWidth" Value="16"/>
                        <Setter Target="FavHeader.Padding" Value="16,0,0,0"/>
                        <Setter Target="HeroHeader.Width" Value="16"/>
                    </VisualState.Setters>
                </VisualState>

                <VisualState x:Name="Full">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="1008"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="RandomPanel.Margin" Value="32,64,0,8"/>
                        <Setter Target="FavoritPanel.Margin" Value="32,64,0,8"/>
                        <Setter Target="OnlinePanel.Margin" Value="32,64,0,8"/>
                        <Setter Target="TextContainer.Padding" Value="32,0,0,0"/>
                        <Setter Target="RandomHeader.Width" Value="32"/>
                        <Setter Target="OnlineList.Padding" Value="32,0"/>
                        <Setter Target="FavHeader.MinWidth" Value="32"/>
                        <Setter Target="FavHeader.Padding" Value="32,0,0,0"/>
                        <Setter Target="HeroHeader.Width" Value="32"/>
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
            <VisualStateGroup>
                <VisualState x:Name="Tall">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowHeight="641"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="HeaderBG.Height" Value="120"/>
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Short">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowHeight="321"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="HeaderBG.Height" Value="80"/>
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Small">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowHeight="0"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="HeaderBG.Height" Value="80"/>
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <ScrollViewer IsHorizontalScrollChainingEnabled="False" IsHorizontalRailEnabled="False"
                      ext:ScrollViewerExtensions.VerticalScrollBarMargin="0,120,0,0" 
                      HorizontalScrollMode="Auto" HorizontalScrollBarVisibility="Hidden" 
                      HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                      VerticalScrollMode="Auto" VerticalScrollBarVisibility="Auto" 
                      IsVerticalRailEnabled="True" x:Name="MainScroller"
                      IsVerticalScrollChainingEnabled="True">
            <StackPanel Margin="0,240,0,16" Orientation="Vertical" x:Name="ContentPanel"
                        HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <ListView SelectionMode="None" IsItemClickEnabled="True" 
                          ItemsSource="{x:Bind Context.HeroList}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                          ItemContainerStyle="{ThemeResource HomeListViewItemStyle}" x:Name="HeroGrid"
                          ScrollViewer.IsVerticalScrollChainingEnabled="True"
                          ScrollViewer.IsHorizontalScrollChainingEnabled="True"
                          ContextRequested="HeroGrid_ContextRequested" ContextCanceled="HeroGrid_ContextCanceled" 
                          ItemClick="HeroGrid_ItemClick" Margin="0" Style="{ThemeResource HorizontalListView}">
                    <ListView.Header>
                        <Grid x:Name="HeroHeader" VerticalAlignment="Stretch" Width="32"/>
                    </ListView.Header>
                    <ListView.ItemTemplate>
                        <DataTemplate x:DataType="vm:HeroItemViewModel">
                            <list:HeroItem Data="{x:Bind }"/>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
                <StackPanel x:Name="OnlinePanel" Orientation="Horizontal" Margin="16,16,16,8"
                            Visibility="{x:Bind Context.CollapseIfZero(Context.OnlineList.Count),Mode=OneWay,FallbackValue=Collapsed}">
                    <TextBlock x:Uid="TopPlaylist" Style="{ThemeResource TitleTextBlockStyle}" FontWeight="Bold"/>
                    <ToggleSwitch Margin="12,0" OnContent="" OffContent=""
                                  Loaded="ToggleSwitch_Loaded"
                                  HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </StackPanel>
                <GridView Margin="0,8" IsSynchronizedWithCurrentItem="False" 
                          Padding="16,0" x:Name="OnlineList"
                          Visibility="{x:Bind Context.CollapseIfZero(Context.OnlineList.Count),Mode=OneWay,FallbackValue=Collapsed}"
                          HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                          ScrollViewer.IsHorizontalRailEnabled="True"
                          animations:ReorderGridAnimation.Duration="360"
                          IsItemClickEnabled="True" SelectionMode="None" ItemClick="OnlineList_ItemClick"
                          ScrollViewer.IsVerticalScrollChainingEnabled="True"
                          ScrollViewer.IsHorizontalScrollChainingEnabled="True"
                          ItemsSource="{x:Bind Context.OnlineList}"
                          ItemContainerStyle="{ThemeResource GridViewItemRevealBackgroundShowsAboveContentStyle}">
                    <GridView.ItemTemplate>
                        <DataTemplate x:DataType="vm:GenericMusicItemViewModel">
                            <list:HomeItem Data="{x:Bind }"/>
                        </DataTemplate>
                    </GridView.ItemTemplate>
                </GridView>
                <StackPanel x:Name="FavoritPanel" Orientation="Horizontal" Margin="60,16,16,8">
                    <TextBlock x:Uid="Favorite" Text="Your Favorite" x:Name="FavoritTitle" 
                               Style="{ThemeResource TitleTextBlockStyle}" FontWeight="Bold"/>
                    <Button Visibility="{x:Bind Context.CollapseIfZero(Context.FavList.Count),Mode=OneWay,FallbackValue=Collapsed}" 
                            Style="{ThemeResource PlayAllButton}" Command="{x:Bind Context.PlayFavCommand}"
                            Margin="8,0" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </StackPanel>
                <ListView Margin="0,8" IsSynchronizedWithCurrentItem="False" IsItemClickEnabled="True" ItemClick="FavList_ItemClick"
                          ScrollViewer.IsHorizontalRailEnabled="True"
                          ContextRequested="HeroGrid_ContextRequested" ContextCanceled="HeroGrid_ContextCanceled"
                          SelectionMode="None" ItemsSource="{x:Bind Context.FavList}" 
                          ScrollViewer.IsVerticalScrollChainingEnabled="True"
                          ScrollViewer.IsHorizontalScrollChainingEnabled="True"
                          HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                          ItemContainerStyle="{ThemeResource HomeListViewItemStyle}"
                          Style="{StaticResource HorizontalListView}" x:Name="FavList">
                    <ListView.Header>
                        <Grid x:Name="FavHeader" VerticalAlignment="Stretch" Padding="60,0,0,0" MinWidth="60">
                            <TextBlock x:Uid="StatisticsUnAvaliabe" Visibility="{x:Bind Context.CollapseIfNotZero(Context.FavList.Count),Mode=OneWay,FallbackValue=Collapsed}" Text="No enough statistics" Style="{ThemeResource SubtitleTextBlockStyle}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                    </ListView.Header>
                    <ListView.Footer>
                        <Grid VerticalAlignment="Stretch" Width="60"/>
                    </ListView.Footer>
                    <ListView.ItemTemplate>
                        <DataTemplate x:DataType="vm:GenericMusicItemViewModel">
                            <list:HomeItem Data="{x:Bind }"/>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
                <StackPanel x:Name="RandomPanel" Orientation="Horizontal" Margin="60,16,16,8">
                    <TextBlock x:Uid="Lucky" Text="Feeling Lucky" x:Name="RandomTitle" HorizontalAlignment="Center" VerticalAlignment="Center" Style="{ThemeResource TitleTextBlockStyle}" FontWeight="Bold"/>
                    <Button Command="{x:Bind Context.PlayRandomCommand}" Style="{ThemeResource PlayAllButton}"
                            Visibility="{x:Bind Context.CollapseIfZero(Context.RandomList.Count),Mode=OneWay,FallbackValue=Collapsed}" 
                            Margin="8,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center">
                    </Button>
                    <Button Visibility="{x:Bind Context.CollapseIfZero(Context.RandomList.Count),Mode=OneWay,FallbackValue=Collapsed}" 
                            Style="{ThemeResource RevealRoundCornerButton}" Command="{x:Bind Context.ReRandomCommand}" 
                            HorizontalAlignment="Center" Margin="8,0,0,0" VerticalAlignment="Center">
                        <Button.Content>
                            <TextBlock>
                                <Run FontSize="13" FontFamily="Segoe MDL2 Assets" Text="&#xE895;" />
                                <Run x:Uid="RefreshPost" Text="Refresh"/>
                            </TextBlock>
                        </Button.Content>
                    </Button>
                </StackPanel>
                <ListView Margin="0,8" IsSynchronizedWithCurrentItem="False" 
                          HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                          ContextRequested="HeroGrid_ContextRequested" 
                          ContextCanceled="HeroGrid_ContextCanceled" 
                          ScrollViewer.IsHorizontalRailEnabled="True"
                          IsItemClickEnabled="True" SelectionMode="None" ItemClick="FavList_ItemClick"
                          ScrollViewer.IsVerticalScrollChainingEnabled="True"
                          ScrollViewer.IsHorizontalScrollChainingEnabled="True"
                          ItemsSource="{x:Bind Context.RandomList}"
                          ItemContainerStyle="{ThemeResource HomeListViewItemStyle}" 
                          Style="{StaticResource HorizontalListView}" 
                          x:Name="LuckyList">
                    <ListView.Header>
                        <Grid x:Name="RandomHeader" VerticalAlignment="Stretch" Width="60"/>
                    </ListView.Header>
                    <ListView.Footer>
                        <Grid VerticalAlignment="Stretch" Width="60"/>
                    </ListView.Footer>

                    <ListView.ItemTemplate>
                        <DataTemplate x:DataType="vm:GenericMusicItemViewModel">
                            <list:HomeItem Data="{x:Bind }"/>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
                <Grid HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="48,128,48,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                               Height="1"
                               Fill="{ThemeResource SystemControlHighlightBaseLowRevealBorderBrush}"
                               Stroke="{x:Null}"/>
                    <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Center" Height="1" 
                               Grid.Column="2"
                               Fill="{ThemeResource SystemControlHighlightBaseLowRevealBorderBrush}"
                               Stroke="{x:Null}"/>
                    <Button Content="Aurora Music" Style="{ThemeResource TextBlockButtonStyle}"
                            Command="{x:Bind Context.GotoDonation}" Grid.Column="1" Margin="12,0"
                            HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </Grid>
            </StackPanel>
        </ScrollViewer>
        <Border Loaded="Header_Loaded" x:Name="HeaderBG" Height="120" VerticalAlignment="Top" HorizontalAlignment="Stretch" Background="{ThemeResource SystemControlAltHighAcrylicElementBrush}"/>
        <Border VerticalAlignment="Top" HorizontalAlignment="Left" x:Name="TextContainer">
            <TextBlock x:Name="HeroTitle" Text="{x:Bind Context.WelcomeTitle, Mode=OneWay}" Style="{ThemeResource HeaderTextBlockStyle}" FontWeight="Bold"/>
        </Border>
    </Grid>
</Page>
